$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

$ git init #通过git init命令把这个目录变成Git可以管理的仓库：

$ git add readme.txt #用命令git add告诉Git，把文件添加到仓库：

$ git commit -m "wrote a readme file" #用命令git commit告诉Git，把文件提交到仓库：

$ git log #git log命令显示从最近到最远的提交日志

$ git reset --hard HEAD^ #在Git中，用HEAD表示当前版本，
也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，
所以写成HEAD~100。
现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：
$ git reset --hard 3628164 #commit id是3628164...，于是就可以指定回到未来的某个版本：

$ git reflog #git reflog用来记录你的每一次命令：

$ git diff HEAD -- readme.txt  #命令可以查看工作区和版本库里面最新版本的区别：

$ git status #运行git status命令看看结果：

$ git checkout -- readme.txt #git checkout -- file可以丢弃工作区的修改：

$ git reset HEAD readme.txt #用命令git reset HEAD file
可以把暂存区的修改撤销掉（unstage），重新放回工作区：

$ git add test.txt
$ git commit -m "add test.txt" #先添加一个新文件test.txt到Git并且提交：

$ git rm test.txt #那就用命令git rm删掉，并且git commit：

$ git remote add origin git@github.com:michaelliao/learngit.git #
把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

$ git push -u origin master #把本地库的内容推送到远程，用git push命令，
实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

$ git push origin master #把本地master分支的最新修改推送至GitHub

$ git clone git@github.com:michaelliao/gitskills.git
用命令git clone克隆一个本地库：

HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

$ git checkout -b dev #我们创建dev分支，然后切换到dev分支：
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev

用git branch命令查看当前分支：
$ git branch
git branch命令会列出所有分支，当前分支前面会标一个*号。


dev分支的工作完成，我们就可以切换回master分支：
$ git checkout master

我们把dev分支的工作成果合并到master分支上：
$ git merge dev

合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev

Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

2222